'#Language "WWB-COM"

Option Explicit

Sub Main
	Dim active_topic As Topic
	Dim word$, json$, text_of_note$, json_text_with_audio$
	Dim link_str$
	Dim URL_arr() As Variant

	For Each active_topic In ActiveDocument.Range(mmRangeAllTopics, True)
		If active_topic.IsSelected = True Then
			word = active_topic.Text
			json = getJsonYandexDictonary(word, "en", "ru")
			text_of_note = get_transcription(json) & " – " & get_synonim(get_translate_word(json),json)
			active_topic.Notes.Insert(text_of_note)

			json_text_with_audio = get_json_dictionaryapi(word)
    		ReDim URL_arr(0)
    		URL_arr = get_URL_of_audio(json_text_with_audio)

			link_str = URL_arr(0)

			If link_str <> "" Then active_topic.CreateHyperlink(link_str)

			Call set_font(active_topic)
		End If
	Next

End Sub


'=============================================================================
'object model MindManager
'=============================================================================
'return active topic
Function get_active_topic() As Topic
	Dim m_Topic As Topic
	For Each m_Topic In ActiveDocument.Range(mmRangeAllTopics, True)
		If m_Topic.IsSelected = True Then
			Set get_active_topic = m_Topic
			Exit For
		End If
	Next
End Function

Private Sub set_font(target_topic As Topic)
	With target_topic.Notes
		.SetSelection(1, 1000)
		.Font.Name = "Times New Roman"
		.Font.Size = 14
	End With
End Sub
'=============================================================================

'=============================================================================
'JSON files
'=============================================================================
' return json format from yandex dictonary
Function getJsonYandexDictonary(findWord As Variant, original_language$, target_language$) As String
    Dim yandexDictonaryKey$
    yandexDictonaryKey = "key" ' input your key
    Dim URL$
    URL = "https://dictionary.yandex.net/api/v1/dicservice.json/lookup?key=" & yandexDictonaryKey & "&lang=" & original_language & "-" & target_language & "&text=" & findWord
    getJsonYandexDictonary = getTextCodeWebPage(URL)
End Function
Function get_json_dictionaryapi(findWord As Variant) As String
    Dim URL$
    URL = "https://api.dictionaryapi.dev/api/v2/entries/en/" & findWord
    get_json_dictionaryapi = getTextCodeWebPage(URL)
End Function

'=============================================================================
'Return text of web page from GET query
'=============================================================================
Function getTextCodeWebPage(URL$) As String
    Dim TextCodeWebPage$
    Dim XMLHTTP As Object

    Set XMLHTTP = CreateObject("MSXML2.XMLHTTP")
    With XMLHTTP
        .Open "GET", URL, False
        .Send
        getTextCodeWebPage = .ResponseText            
    End With
    Set XMLHTTP = Nothing
End Function



'=============================================================================
'Parsing of JSON files. High-level function
'=============================================================================
Public Function get_translate_word(json_text As String) As String
        Dim codeJS_Function$
        codeJS_Function = "function GetData (jstruct) {return jstruct.def[0].tr[0].text;}"
        get_translate_word = parse_json(json_text, codeJS_Function)
End Function

Public Function get_transcription(json_text As String) As String
        Dim codeJS_Function$
        codeJS_Function = "function GetData (jstruct) {return jstruct.def[0].ts;}"
        get_transcription = parse_json(json_text, codeJS_Function)

        If get_transcription <> "" Then 
            get_transcription = "[" & get_transcription & "]"
        End If
End Function

Public Function get_synonim(TranslateWord As String, json_text As String) As String
    Dim Synonim$, codeJS_Function$
    Dim j&
        If TranslateWord <> "" Then
            For j = 0 To 50
                On Error GoTo ExitFor
                codeJS_Function = "function GetData (jstruct) {return jstruct.def[0].tr[0].syn[" & j & "].text;}"
                Synonim = parse_json(json_text, codeJS_Function)
                If Synonim <> "" Then
                    TranslateWord = TranslateWord & ", " & Synonim
                End If
            Next j
ExitFor:
        End If

        get_synonim = TranslateWord
End Function

Public Function get_URL_of_audio(json_text As String) As Variant

        Dim URL$, codeJS_Function$
        Dim j&
        Dim URL_arr() As Variant
        ReDim URL_arr(0)
            For j = 0 To 5
                On Error GoTo ExitFor
                codeJS_Function = "function GetData (jstruct) {return jstruct[0].phonetics[" & j & "].audio;}"
                URL = parse_json(json_text, codeJS_Function)
                If URL <> "" Then URL_arr = Append(URL_arr, URL)
            Next j
ExitFor:
        get_URL_of_audio = URL_arr
End Function



'=============================================================================
'Parsing of JSON files. low-level function
'=============================================================================
Private Function parse_json(textJsonFile$, codeJS_Function$) As String
    On Error Resume Next

    Dim myJSCript As Object
    Set myJSCript = CreateObject("MSScriptControl.ScriptControl")
    With myJSCript
        .Language = "JScript"
        Dim objJson As Object
        Set objJson = .Eval("(" + textJsonFile + ")")
        .AddCode codeJS_Function
        parse_json = .Run("GetData", objJson)
    End With

    Set myJSCript = Nothing
    Set objJson = Nothing    
End Function

'=============================================================================
'Arrays
'=============================================================================
'true – element exist in array, false - otherwise
Function checkElementArr(arr() As Variant, elementArr$) As Boolean
    Dim countElementArr&, i&
    countElementArr = UBound(arr) - LBound(arr)

    For i = 0 To countElementArr
        If arr(i) = elementArr Then
            checkElementArr = True
            Exit Function
        End If
    Next i

    checkElementArr = False
End Function

Add unique elements to array
Function Append(InArray() As Variant, Value As String)                         

    If checkElementArr(InArray, Value) = False Then
        If InArray(0) <> "" Then
            ReDim Preserve InArray(UBound(InArray) + 1)                         
            InArray(UBound(InArray)) = Value                                    
        Else
            InArray(0) = Value
        End If
    End If

    Append = InArray                                                            
End Function
